class Solution {
    struct euclidean {
        int index;
        float dist;
    };

public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {

        vector<float> dist;
        vector<euclidean> list;
        vector<vector<int>> result;
        float temp_dist;
        euclidean temp;
        vector<int> index;
        for (int i = 0; i < points.size(); i++) {
            temp_dist =
                sqrt(pow(points[i][0] - 0, 2) + pow(points[i][1] - 0, 2));
            temp.dist = temp_dist;
            temp.index = i;
            list.push_back(temp);
            if (list.size() > 1) {
                for (int i = list.size() - 1; i > 0; i--) {
                    if (list[i].dist < list[i - 1].dist) {
                        temp.dist = list[i].dist;
                        temp.index = list[i].index;
                        list[i].dist = list[i - 1].dist;
                        list[i].index = list[i - 1].index;
                        list[i - 1].dist = temp.dist;
                        list[i - 1].index = temp.index;
                    } else {
                        break;
                    }
                }
            }
        }
        for (int i = 0; i < k; i++) {
            result.push_back(points[list[i].index]);
        }
        return result;
    }
};